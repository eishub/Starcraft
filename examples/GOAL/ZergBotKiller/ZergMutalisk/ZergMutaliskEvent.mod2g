use ZergMutalisk as knowledge.

module ZergMutaliskEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	if (_).sent:(leader(Id)) then insert(leader(Id)).
	
	if bel(leader(Id), self(Id,_)) then insert(leader).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	if percept(status(_,_,X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then delete(position(X2,Y2)) + insert(position(X1,Y1)).
	
	if percept(status(H1,_,_,_)), bel(hitPoints(H2), H1 \= H2) then delete(hitPoints(H2)) + insert(hitPoints(H1)).
		
	forall percept(unit(true, Type,Id,Health,Shields,IsFlying,X,Y)), bel(self(MyId,_), not(friendly(Type,Id,Health,Shields,X,Y)), MyId \= Id) 
	do insert(friendly(Type, Id, Health, Shields, X, Y)).
	forall bel(friendly(Type, Id, Health, Shields, X, Y)) , not(percept(unit(true, Type,Id,Health,Shields,IsFlying,X,Y)))
	do delete(friendly(Type,Id,Health, Shields,X,Y)).
		
	forall percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)), bel(not(enemy(Type,Id,Health,Shields,IsFlying,X,Y))) 
	do insert(enemy(Type,Id,Health,Shields,IsFlying,X,Y)).
	forall bel(enemy(Type, Id, Health, Shields,IsFlying ,X, Y)) , not(percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)))
	do delete(enemy(Type,Id,Health, Shields,IsFlying,X,Y)).	
		
	forall percept(unitAmount(Type,Count)), not(bel(unitAmount(Type,Count))) do insert(unitAmount(Type,Count)).
	forall bel(unitAmount(Type,Count)),not(percept(unitAmount(Type,Count))) do delete(unitAmount(Type,Count)).
	
	forall percept(attacking(Unit,Target)), not(bel(attacking(Unit,Target))) do insert(attacking(Unit,Target)).
	forall bel(attacking(Unit,Target)),not(percept(attacking(Unit,Target))) do delete(attacking(Unit,Target)).
		
	%%%%%%%%%%%%%%% ----------------------------------------- GOALS ---------------------------------------- %%%%%%%%%%%%%%%
	
	if bel(self(Id,_), attacking(_, Id), enemyBase(X, Y)) then adopt(position(X, Y)).
	
	if bel(leader, enemyBase(X, Y), unitAmount("Zerg Mutalisk",Count), Count > 5) then adopt(attack(X,Y)).
		
	if bel(leader, enemy(_, Id, _, _, Bool, X, Y)) then adopt(attack(X, Y, Bool)).
	
	if bel(not(leader), leader(Id), friendly(_,Id,_,_,X,Y)) then adopt(attack(X, Y)).
}