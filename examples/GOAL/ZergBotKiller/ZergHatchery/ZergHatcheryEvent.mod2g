use ZergHatchery as knowledge.


module ZergHatcheryEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	forall bel(friendly("Zerg Drone",Id,_,_,_,_)) , not(percept(unit(true, "Zerg Drone",Id,_,_,_,_,_))) do ('overMind').send:(death(Id)).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts ---------------------------------------- %%%%%%%%%%%%%%%
	
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) then delete(minerals(OM)) + insert(minerals(M)).
	
	if percept(resources(_, G, _, _)), bel(gas(OG), not(OG == G)) then delete(gas(OG)) + insert(gas(G)).
	
	forall percept(unit(true, Type,Id,Health,Shields,_,X,Y)), bel(self(MyId,_), not(friendly(Type,Id,Health,Shields,X,Y)), MyId \= Id) 
	do insert(friendly(Type, Id, Health, Shields, X, Y)).
	forall bel(friendly(Type, Id, Health, Shields, X, Y)) , not(percept(unit(true, Type,Id,Health,Shields,_,X,Y)))
	do delete(friendly(Type,Id,Health, Shields,X,Y)).
	
	forall percept(isMorphing(Name, Id)), not(bel(isMorphing(Name, Id))) do insert(isMorphing(Name, Id)).
	forall bel(isMorphing(Name, Id)), not(percept(isMorphing(Name, Id))) do delete(isMorphing(Name, Id)).
	
	forall percept(unitAmount(Type,Count)), not(bel(unitAmount(Type,Count))) do insert(unitAmount(Type,Count)).
	forall bel(unitAmount(Type,Count)),not(percept(unitAmount(Type,Count))) do delete(unitAmount(Type,Count)).
	
	if percept(resources(_, _, C, T)), bel(supply(OC, OT), (not(OC == C) ; not(OT == T))) then delete(supply(OC, OT)) + insert(supply(C, T)).
	
	if percept(queueSize(N)), bel(queueSize(No), No \= N) then delete(queueSize(No)) + insert(queueSize(N)).
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS ------------------------------------------- %%%%%%%%%%%%%%%
	
	if not(goal(unitAmount("Zerg Drone",12))), bel(unitAmount("Zerg Drone",M) ,M<12, enemyRace("Protoss")) 
	then adopt(unitAmount("Zerg Drone",12)).
		
	if bel(not(isMorphing("Zerg Overlord", _)), queueSize(N), N < 2, supply(Y, Z), (Z - Y) < 6, M is Z + 16) then adopt(supply(Y, M)).
		
	if bel(unitAmount("Zerg Spire", _); not(enemyRace("Protoss"))) then adopt(unitAmount("Zerg Zergling", 50)).
	
	if bel(not(unitAmount("Zerg Spire", _)), friendly("Zerg Spawning Pool", _, _, _, _, _), enemyRace("Protoss")) 
	then adopt(unitAmount("Zerg Zergling", 2)).	
	
	if bel((not(unitAmount("Zerg Lair", _)) ; unitAmount("Zerg Lair", Count), Count < 1); isMorphing("Zerg Lair", _), enemyRace("Protoss")) 
	then adopt(morph("Zerg Lair")).
}