use ZergHydralisk as knowledge.

module ZergHydraliskEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) then delete(minerals(OM)) + insert(minerals(M)).
	
	if percept(resources(_, G, _, _)), bel(gas(OG), not(OG == G)) then delete(gas(OG)) + insert(gas(G)).
	
	forall percept(unit(true, Type,Id,Health,Shields,IsFlying,X,Y)), bel(self(MyId,_), not(friendly(Type,Id,Health,Shields,X,Y)), MyId \= Id) 
	do insert(friendly(Type, Id, Health, Shields, X, Y)).
	forall bel(friendly(Type, Id, Health, Shields, X, Y)) , not(percept(unit(true, Type,Id,Health,Shields,IsFlying,X,Y)))
	do delete(friendly(Type,Id,Health, Shields,X,Y)).
		
	forall percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)), bel(not(enemy(Type,Id,Health,Shields,IsFlying,X,Y))) 
	do insert(enemy(Type,Id,Health,Shields,IsFlying,X,Y)).
	forall bel(enemy(Type, Id, Health, Shields,IsFlying ,X, Y)) , not(percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)))
	do delete(enemy(Type,Id,Health, Shields,IsFlying,X,Y)).	
		
	forall percept(unitAmount(Type,Count)), not(bel(unitAmount(Type,Count))) do insert(unitAmount(Type,Count)).
	forall bel(unitAmount(Type,Count)),not(percept(unitAmount(Type,Count))) do delete(unitAmount(Type,Count)).
		
	%%%%%%%%%%%%%%% ----------------------------------------- GOALS ---------------------------------------- %%%%%%%%%%%%%%%
		
	if bel(unitAmount("Zerg Lurker", Amount), Amount >= 5, enemyBase(X, Y)) then adopt(attack(X,Y)).
	
	if bel(enemy(_, Id, _, _, _, _, _)) then adopt(attack(Id)).
	
	if bel(((unitAmount("Zerg Lurker", Amount), Amount =< 5) ; not(unitAmount("Zerg Lurker", _))), minerals(M), M >= 50, gas(G), G >= 100)
	then adopt(morph("Zerg Lurker")).
}