use ZergDrone as knowledge.

module ZergDroneEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
		
	if (Name).sent:(builder) then insert(builder).
	
	if (Name).sent(scout) then insert(scout).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
		
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) then delete(minerals(OM)) + insert(minerals(M)).
	
	if percept(resources(_, G, _, _)), bel(gas(OG), not(OG == G)) then delete(gas(OG)) + insert(gas(G)).
	
	forall percept(unit(true, Type,Id,Health,Shields,_,X,Y)), bel(self(MyId,_), not(friendly(Type,Id,Health,Shields,X,Y)), MyId \= Id) 
	do insert(friendly(Type, Id, Health, Shields, X, Y)).
	forall bel(friendly(Type, Id, Health, Shields, X, Y)) , not(percept(unit(true, Type,Id,Health,Shields,_,X,Y)))
	do delete(friendly(Type,Id,Health, Shields,X,Y)).
	
	forall percept(isMorphing(Name, Id)), not(bel(isMorphing(Name, Id))) do insert(isMorphing(Name, Id)).
	forall bel(isMorphing(Name, Id)), not(percept(isMorphing(Name, Id))) do delete(isMorphing(Name, Id)).
	
	forall percept(unitAmount(Type,Count)), not(bel(unitAmount(Type,Count))) do insert(unitAmount(Type,Count)).
	forall bel(unitAmount(Type,Count)),not(percept(unitAmount(Type,Count))) do delete(unitAmount(Type,Count)).
	
	if percept(status(_,_,X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then delete(position(X2,Y2)) + insert(position(X1,Y1)).
		
	if percept(condition(NewList)), bel(condition(OldList), NewList \= OldList) then delete(condition(OldList)) + insert(condition(NewList)).
		
	if percept(resources(M, _, _, _)), bel(minerals(OM), not(OM == M)) then delete(minerals(OM)) + insert(minerals(M)).
	if percept(resources(_, G, _, _)), bel(gas(OG), not(G == OG)) then delete(gas(OG)) + insert(gas(G)).
			
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
	forall percept(mineralField(Id,Amount1,_,X,Y)), bel(mineralField(Id,Amount2,X,Y), (Amount1 \= Amount2)) do delete(mineralField(Id,Amount2,X,Y)).
		
	forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
	forall bel(constructionSite(X,Y)),not(percept(constructionSite(X,Y))) do delete(constructionSite(X,Y)).
		
	forall percept(vespeneGeyser(Id,_,_,X,Y)), bel(not(vespeneGeyser(Id,X,Y))) do insert(vespeneGeyser(Id,X,Y)).
		
	forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
	forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
		
	%if percept(isStuck) then insert(isStuck).
		
	%friendly(Type, Id, Health, Shields, X, Y)
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	
	if bel(scout, enemyRace("Protoss"), enemyBase(X, Y), condition(List), not(member(moving, List))) then adopt(position(X, Y)).
	
	if percept(unit(false, _,Id,Health,_,_,_,_)), bel(scout, enemyRace("Protoss"), Health > 200, self(MyId,_)) then adopt(attacking(MyId, Id)).
	
	if percept(attacking(_, MyId)), bel(scout, enemyRace("Protoss"),self(MyId,_), friendly(Type, _,_ ,_ , X, Y), 
	member(Type,["Zerg Hatchery", "Zerg Lair", "Zerg Hive"])) then adopt(position(X, Y)).
	
	if bel(builder, enemyRace("Protoss"), friendly("Zerg Hatchery",_,_,_,BX,BY), vespeneGeyser(Id, X , Y),
	minerals(M), M >= 75, distance(BX, BY, X, Y, D), D < 10) then adopt(buildExtractor(X, Y)).
	
	%if bel(builder, minerals(M), M >= 200, gas(G), G >= 150, friendly("Zerg Lair", _, _, _,_,_),
	%not(friendly("Zerg Spire",_,_,_,_,_))) then adopt(unitAmount("Zerg Spire", 1)).
	
	if not(goal(unitAmount("Zerg Sunken Colony", 3))), bel(builder, enemyRace("Protoss"), friendly("Zerg Spawning Pool", _, _, _,_,_),
	((unitAmount("Zerg Sunken Colony", Amount), Amount < 3) ; not(unitAmount("Zerg Sunken Colony",_))),
	not(unitAmount("Zerg Creep Colony", _))) then adopt(unitAmount("Zerg Sunken Colony", 3)).
	
	%if not(goal(buildHatchery(X, Y))), bel(builder, enemyRace("Protoss"), constructionSite(X,Y), minerals(M), M >= 300, 
	%friendly("Zerg Spire", _, _, _,_,_), not(unitAmount("Zerg Hatchery", _))) then adopt(buildHatchery(X, Y)).
		
	if bel(builder, constructionSite(X,Y), minerals(M), M >= 200, 
	not(friendly("Zerg Spawning Pool", _, _, _,_,_))) then adopt(buildPool(X, Y)).
	
	if bel(builder, enemyRace("Protoss"), friendly("Zerg Spawning Pool", _, _, _,_,_)) then adopt(unitAmount("Zerg Hydralisk Den", 1)).
		
	if bel(not(scout), mineralField(Id,Amount,X,Y), friendly(Type, _,_ ,_ , CX, CY), 
	member(Type,["Zerg Hatchery", "Zerg Lair", "Zerg Hive"]), distance(X,Y,CX,CY,L), L<10) then adopt(goGather(Id)).
	
	%if bel(isStuck) then adopt(stop).
}