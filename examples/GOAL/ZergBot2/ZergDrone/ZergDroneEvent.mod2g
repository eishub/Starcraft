use ZergDrone as knowledge.


module ZergDroneEvent {
		%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%

		if percept(supply(C,Max)), bel(supply(OC, OMax), not(C == OC), not(Max == OMax)) then delete(supply(OC, OMax)) + insert(supply(C,Max)).
		
		if percept(minerals(M)), bel(minerals(OM), not(M == OM)) then insert(minerals(M)) + delete(minerals(OM)).
		
		if percept(gas(M)), bel(gas(OM), not(M = OM)) then insert(gas(M)) + delete(gas(OM)).
		
		if percept(gathering(X)), not(bel(gathering(X))) then insert(gathering(X)).
		if bel(gathering(X)), not(percept(gathering(X))) then delete(gathering(X)).
				
		forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
		forall percept(mineralField(Id,Amount1,_,X,Y)), bel(mineralField(Id,Amount2,X,Y), (Amount1 \= Amount2)) do delete(mineralField(Id,Amount2,X,Y)).
		
		forall percept(friendly(Name,Type,Id,Health,Shields,X,Y)), bel(id(MyId), not(friendly(Name,Type,Id,X,Y)), MyId \= Id) 
		do insert(friendly(Name,Type,Id,X,Y)).
		forall bel(friendly(Name,Type,Id,X,Y)) , not(percept(friendly(Name,Type,Id,_,_,X,Y)))
		do delete(friendly(Name,Type,Id,X,Y)).
		
		if percept(position(X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then delete(position(X2,Y2)) + insert(position(X1,Y1)).
		
		forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
		forall bel(constructionSite(X,Y)),not(percept(constructionSite(X,Y))) do delete(constructionSite(X,Y)).
		
		forall percept(vespeneGeyser(Id,_,_,X,Y)), bel(not(vespeneGeyser(Id,X,Y))) do insert(vespeneGeyser(Id,X,Y)).
		
		forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
		forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
		
		forall percept(unit(Type,Count)), not(bel(unit(Type,Count))) do insert(unit(Type,Count)).
		forall bel(unit(Type,Count)),not(percept(unit(Type,Count))) do delete(unit(Type,Count)).
		
		%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
		
		if bel(constructionSite(X,Y), minerals(M), M >= 200, builder, not(friendly(_, "Zerg Spawning Pool", _, _, _))) 
		then adopt(buildPool(X, Y)).
		
		if bel(friendly(_ ,"Zerg Hatchery",_,BX,BY), vespeneGeyser(Id, X , Y),
		builder, minerals(M), M >= 75, distance(BX, BY, X, Y, D), D < 10) then adopt(buildExtractor(X, Y)).
		
		if bel(constructionSite(X,Y), minerals(M), M >= 75, builder, not(friendly(_, "Zerg Evolution Chamber", _, _, _))) 
		then drop(true) + adopt(buildEvoChamber(X, Y)).
		
		if bel(mineralField(Id,Amount,MX,MY), builder ,Amount < 500 ,friendly(_ ,"Zerg Hatchery",_ ,X,Y)
		,nearestBase(X, Y, NX, NY), minerals(M), M >= 400, distance(X, Y, MX, MY, Res), Res < 7) 
		then drop(true) + adopt(expandTo(X, Y)).
		
		if bel(constructionSite(X,Y), minerals(M), M >= 100, gas(G), G >= 50,
		not(friendly(_, "Zerg Hydralisk Den", _, _, _)), builder) then drop(true) + adopt(buildHydraDen(X,Y)).
		
		if not(goal(true)), bel(mineralField(Id,Amount,X,Y), chokepointlocation(X,Y,CX,CY), distance(X,Y,CX,CY,L), L>10) 
		then adopt(goGather(Id)).
		
		%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
		
		if (Name).sent(builder) then insert(builder).
}