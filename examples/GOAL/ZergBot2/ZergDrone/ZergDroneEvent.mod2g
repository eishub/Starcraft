use ZergDrone as knowledge.

module ZergDroneEvent {
		%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
		
		if percept(supply(C,Max)), bel(supply(OC, OMax), not(C == OC), not(Max == OMax)) then delete(supply(OC, OMax)) + insert(supply(C,Max)).
		
		if percept(minerals(M)), bel(minerals(OM), not(M == OM)) then insert(minerals(M)) + delete(minerals(OM)).
		
		if percept(gas(M)), bel(gas(OM), not(M = OM)) then insert(gas(M)) + delete(gas(OM)).
		
		if percept(gathering(X)), not(bel(gathering(X))) then insert(gathering(X)).
		if not(percept(gathering(X))), bel(gathering(X)) then delete(gathering(X)).
				
		forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
		forall not(percept(mineralField(Id,Amount,_,X,Y))), bel(mineralField(Id,Amount,X,Y)) do delete(mineralField(Id,Amount,X,Y)).
		
		forall percept(friendly(Name,Type,Id,Health,Shields,X,Y)), bel(id(MyId), not(friendly(Name,Type,Id,X,Y)), MyId \= Id) 
		do insert(friendly(Name,Type,Id,X,Y)).
		forall not(percept(friendly(Name,Type,Id,_,_,X,Y))), bel(friendly(Name,Type,Id,X,Y)) 
		do delete(friendly(Name,Type,Id,X,Y)).
		
		if percept(position(X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then delete(position(X2,Y2)) + insert(position(X1,Y1)).
		
		forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
		forall not(percept(constructionSite(X,Y))), bel(constructionSite(X,Y)) do delete(constructionSite(X,Y)).
		
		if percept(constructing), not(bel(constructing)) then insert(constructing).
		if not(percept(constructing)), bel(constructing) then delete(constructing).
		
		forall percept(vespeneGeyser(Id,_,_,X,Y)), bel(not(vespeneGeyser(Id,X,Y))) do insert(vespeneGeyser(Id,X,Y)).
		
		%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
		
		if bel(constructionSite(X,Y), minerals(M), M >= 200, not(friendly(_, "Zerg Spawning Pool", _, _, _))) 
		then adopt(buildPool(X, Y)).
		
		if bel(vespeneGeyser(Id, X , Y), minerals(M), M >= 75, friendly(_ ,"Zerg Hatchery",_ ,BX,BY) 
		,distance(BX, BY, X, Y, D), D < 10) then adopt(buildExtractor(X, Y)).
		
		if bel(constructionSite(X,Y), minerals(M), M >= 75, not(friendly(_, "Zerg Evolution Chamber", _, _, _))) 
		then adopt(buildEvoChamber(X, Y)).
		
		if bel(mineralField(Id,Amount,MX,MY), builder ,Amount < 500 ,friendly(_ ,"Zerg Hatchery",_ ,X,Y)
		,nearestBase(X, Y, NX, NY), minerals(M), M >= 400, distance(X, Y, MX, MY, Res), Res < 7) 
		then adopt(expandTo(X, Y)).
		
		if bel(mineralField(Id,Amount,X,Y), chokepointlocation(X,Y,CX,CY), distance(X,Y,CX,CY,L), L>10) 
		then adopt(goGather(Id)).
		
}