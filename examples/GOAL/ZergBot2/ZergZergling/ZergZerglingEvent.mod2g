use ZergZergling as knowledge.

module ZergZerglingEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
		
	%	if percept(isStuck) then insert(isStuck).
		
	forall percept(unit(true, Type,Id,Health,Shields,IsFlying,X,Y)), bel(self(MyId,_), not(friendly(Type,Id,Health,Shields,X,Y)), MyId \= Id) 
	do insert(friendly(Type, Id, Health, Shields, X, Y)).
	forall bel(friendly(Type, Id, Health, Shields, X, Y)) , not(percept(unit(true, Type,Id,Health,Shields,IsFlying,X,Y)))
	do delete(friendly(Type,Id,Health, Shields,X,Y)).
		
	forall percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)), bel(not(enemy(Type,Id,Health,Shields,IsFlying,X,Y))) 
	do insert(enemy(Type,Id,Health,Shields,IsFlying,X,Y)).
	forall bel(enemy(Type, Id, Health, Shields,IsFlying ,X, Y)) , not(percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)))
	do delete(enemy(Type,Id,Health, Shields,IsFlying,X,Y)).	
		
	forall percept(unitAmount(Type,Count)), not(bel(unitAmount(Type,Count))) do insert(unitAmount(Type,Count)).
	forall bel(unitAmount(Type,Count)),not(percept(unitAmount(Type,Count))) do delete(unitAmount(Type,Count)).
		
	%%%%%%%%%%%%%%% ----------------------------------------- GOALS ---------------------------------------- %%%%%%%%%%%%%%%
		
	if bel(unitAmount("Zerg Zergling", Amount), Amount >= 30, enemyBase(X, Y)) then adopt(attack(X,Y)).
		
	if bel(enemy(_, Id, _, _, 'false', _, _)) then adopt(attack(Id)).
		
	%if bel(isStuck) then adopt(stop).
}