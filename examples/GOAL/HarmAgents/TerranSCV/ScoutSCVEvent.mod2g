use TerranSCV as actionspec.
use TerranSCV as knowledge.

module TerranSCVEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	if percept(resources(Min,Gas,C,Max)), bel(supply(OC, OMax)), bel(minerals(OM), not(Min = OM)), bel(gas(Go), not(Gas = Go))
		then delete(supply(OC, OMax)) + insert(supply(C,Max)) + insert(minerals(Min)) + delete(minerals(OM))+
		insert(gas(Gas)) + delete(gas(Go)).
		
	if percept(gathering(X)), bel(not(gathering(X))) then insert(gathering(X)).
	if bel(gathering(X)), not(percept(gathering(X))) then delete(gathering(X)).
	
	if percept(condition(X)), bel(not(condition(X))) then insert(condition(X)).
	if bel(condition(X)), not(percept(condition(X))) then delete(condition(X)).
	
	if percept(status(_,_,X,Y)), bel(not(pos(X,Y))) then insert(pos(X,Y)).
	if bel(pos(X,Y)), not(percept(status(_,_,X,Y))) then delete(pos(X,Y)).
				
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
	forall percept(mineralField(Id,Amount1,_,X,Y)), bel(mineralField(Id,Amount2,X,Y), (Amount1 \= Amount2)) do delete(mineralField(Id,Amount2,X,Y)).

	forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
	forall bel(constructionSite(X,Y)), not(percept(constructionSite(X,Y))) do delete(constructionSite(X,Y)).
	
	forall percept(attacking(X,Y)), not(bel(attacking(X,Y))) do insert(attacking(X,Y)).
	forall bel(attacking(X,Y)), not(percept(attacking(X,Y))) do delete(attacking(X,Y)).
		
	if percept(constructing), not(bel(constructing)) then insert(constructing).
	if bel(constructing), not(percept(constructing)) then delete(constructing).
		
	if percept(refinery(Id, Resources, Group)), bel(not(refinery(Id, Resources, Group))) then insert(refinery(Id, Resources, Group)).
	if bel(refinery(Id, Resources, Group)), not(percept(refinery(Id, Resources, Group))) then delete(refinery(Id, Resources, Group)).
		
	if percept(unit(_, _, Id,_,_,_,X,Y)), bel(not(unit(Id, X, Y))) then insert(unit(Id, X, Y)).
	if bel(unit(Id, X, Y)), not(percept(unit(_, _, Id,_,_,_,X,Y))) then delete(unit(Id, X, Y)).
		
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
		
	if goal(pos(X,Y)), bel(pos(X2,Y2),distance(X,Y,X2,Y2,D), D < 5) then drop(pos(X,Y)).	
		
	if bel(id(Id),not(attacking(_,Id)), enemybase(X, Y),pos(X2,Y2),distance(X,Y,X2,Y2,D), D>20),not(goal(pos(X,Y))) then drop(true)+adopt(pos(X,Y)).
	if not(goal(pos(_,_))),bel(findNewPosition(X,Y)) then adopt(pos(X,Y)).
	
}