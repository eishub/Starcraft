use ProtossProbe as knowledge.

module ProtossProbeEvent {
		%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
		
		if percept(supply(C,Max)), bel(supply(OC, OMax)) then delete(supply(OC, OMax)) + insert(supply(C,Max)).
		
		if percept(minerals(M)), bel(minerals(OM)) then delete(minerals(OM)) + insert(minerals(M)).
		
		if percept(gas(M)), bel(gas(OM), not(M = OM)) then insert(gas(M)) + delete(gas(OM)).
		
		if percept(gathering(X)), not(bel(gathering(X))) then insert(gathering(X)).
		if bel(gathering(X)), not(percept(gathering(X))) then delete(gathering(X)).
				
		forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
		forall percept(mineralField(Id,Amount1,_,X,Y)), bel(mineralField(Id,Amount2,X,Y), (Amount1 \= Amount2)) do delete(mineralField(Id,Amount2,X,Y)).
		
		forall percept(friendly(Name,Type,Id,Health,Shields,X,Y)), bel(id(MyId), not(friendly(Name,Type,Id,X,Y)), MyId \= Id) 
		do insert(friendly(Name,Type,Id,X,Y)).
		forall bel(friendly(Name,Type,Id,X,Y)) , not(percept(friendly(Name,Type,Id,_,_,X,Y)))
		do delete(friendly(Name,Type,Id,X,Y)).
		
		if percept(position(X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then delete(position(X2,Y2)) + insert(position(X1,Y1)).
		
		forall percept(constructionSite(X,Y,B)), not(bel(constructionSite(X,Y,B))) do insert(constructionSite(X,Y,B)).
		forall bel(constructionSite(X,Y,B)),not(percept(constructionSite(X,Y,B))) do delete(constructionSite(X,Y,B)).
		
		forall percept(vespeneGeyser(Id,_,_,X,Y)), bel(not(vespeneGeyser(Id,X,Y))) do insert(vespeneGeyser(Id,X,Y)).
		
		forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
		forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
		
		forall percept(unit(Type,Count)), not(bel(unit(Type,Count))) do insert(unit(Type,Count)).
		forall bel(unit(Type,Count)),not(percept(unit(Type,Count))) do delete(unit(Type,Count)).
				
		%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
		
		if bel(constructionSite(X,Y,true), minerals(M), M >= 150, builder, 
		((unit("Protoss Gateway",Num), Num < 3) ; not(unit("Protoss Gateway",_)))) then adopt(build("Protoss Gateway", X, Y)).
		
		if bel(friendly(_ ,"Protoss Nexus",_,BX,BY), vespeneGeyser(_, X, Y), 
		builder, minerals(M), M >= 100, distance(BX, BY, X, Y, D), D < 10) then adopt(build("Protoss Assimilator", X, Y)).
		
		if not(goal(build("Protoss Pylon", X, Y))), bel(builder, supply(C, Max), ((Max/2) - C) =< 5, constructionSite(X,Y, _), minerals(M)
		,M >= 150) then adopt(build("Protoss Pylon", X, Y)).
		
		if goal(build("Protoss Pylon", X, Y)), bel(unit("Protoss Pylon", _), not(unit("Protoss Gateway",_))) then drop(build("Protoss Pylon", X, Y)).
		
		if not(goal(build("Protoss Cybernetics Core", X, Y))), bel(constructionSite(X,Y,true), minerals(M), M >= 200, builder, 
		not(friendly(_, "Protoss Cybernetics Core", _, _, _)), friendly(_, "Protoss Gateway", _, _, _)) 
		then adopt(build("Protoss Cybernetics Core", X, Y)).
		
		if not(goal(build("Protoss Forge", X, Y))), bel(constructionSite(X,Y,true), minerals(M), M >= 150, builder, 
		not(friendly(_, "Protoss Forge", _, _, _))) then adopt(build("Protoss Forge", X, Y)).
		
		if not(goal(true)), bel(mineralField(Id,_,X,Y), friendly(_, "Protoss Nexus", _, CX, CY), distance(X,Y,CX,CY,L), L<10) 
		then adopt(gather(Id)).
		
		%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
		
		if (Name).sent(builder) then insert(builder).
	
}