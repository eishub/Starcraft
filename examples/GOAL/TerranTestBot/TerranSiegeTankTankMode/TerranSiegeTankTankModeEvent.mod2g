use TerranSiegeTankTankMode as knowledge.
use "../GenericMods/GenericPercepts" as module.


module TerranSiegeTankTankModeEvent {
	if (_).sent(siegeUpgrade) then insert(siegeUpgrade).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	% The generic percepts most units use
	if true then GenericPercepts.
	
	% Insert enemy when one is perceived
	forall percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)), bel(not(enemy(Type,Id,Health,Shields,IsFlying,X,Y))) 
	do insert(enemy(Type,Id,Health,Shields,IsFlying,X,Y)).
	forall bel(enemy(Type, Id, Health, Shields,IsFlying ,X, Y)) , not(percept(unit(false, Type,Id,Health,Shields,IsFlying,X,Y)))
	do delete(enemy(Type,Id,Health, Shields,IsFlying,X,Y)).	
	
	% The handling of condition stim
	if percept(condition(NewList)), bel(member(sieged, NewList), condition(OldList), not(member(sieged, OldList))) then insert(sieged).
	if bel(sieged), percept(condition(List)), bel(not(member(sieged, List))) then delete(sieged).
	
	% The handling of the position 
	if percept(status(_,_,X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then delete(position(X2,Y2)) + insert(position(X1,Y1)).

	%%%%%%%%%%%%%%% ----------------------------------------- GOALS ---------------------------------------- %%%%%%%%%%%%%%%
	
	if not(goal(sieged)), bel(not(sieged), siegeUpgrade) then adopt(sieged).
	
	if not(goal(unsieged)), not(bel(unsieged)) then adopt(unsieged).
	
}