main module{
	beliefs{
		trainProbe.
	}
	program{
		if bel(percept(unit("Protoss Probe",X)),X<20) then train("Protoss Probe").
		%if bel(supply(C, M), (M - C) =< 2, percept(friendly(_ , "Terran SCV", Id, _, _, _, _))) then (Id).send(build("Terran Supply Depot")).
	}
	actionspec {	
		train(Id) {
			pre {trainProbe}
			post {not(trainProbe)}
		}
	}
}

event module {
	program {
		forall bel(received(Sender, scv(Name, Id))) do insert(scv(Name, Id)).
		
		if bel(not(trainProbe), percept(queueSize(N)), N < 2, percept(minerals(X)),X>=50,percept(supply(Y,Z)),Y<Z) then insert(trainProbe).
		
		if bel(percept(supply(C,Max)), supply(OC, OMax)) then delete(supply(OC, OMax)) + insert(supply(C,Max)).
		
		if bel(not(done), scv(Name, Id), percept(friendly(_ ,"Protoss Probe",Id,_ ,_ ,_ ,_ ,_ ,_ ))) then (Name).sendonce(builder) + insert(done).
		
		if bel(done, scv(Name, Id), not(percept(friendly(_ ,"Protoss Probe",Id,_ ,_ ,_ ,_ ,_ ,_ )))) then delete(done).
	}	
}
