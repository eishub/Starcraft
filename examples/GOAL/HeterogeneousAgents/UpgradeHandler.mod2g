module upgrade{	
	#import "UpgradeDatabase.pl".		
	
	knowledge{
		canAfford(Type) :- cost(Type, CostM, CostG, CostS),
			minerals(M), 
			gas(G), 
			supply(S,TS), 
			DiffS is TS - S, 
			CostM =< M, 
			CostG =< G, 
			CostS =< DiffS.
	}
	
	beliefs{
		minerals(0).
		gas(0).
		supply(0,0).
	}
	
	program[order = linearall]{
		
		if bel(shouldUpgrade(Type), percept(id(Id)), string_concat(Id, ' Trying to upgrade: ', Res), string_concat(Res, Type, Res2)) then print(Res2)+upgrade(Type).
			
		forall bel(percept(minerals(M)), minerals(CM), M \= CM) do insert(minerals(M))+delete(minerals(CM)).
		forall bel(percept(gas(G)), gas(CG), G \= CG) do delete(gas(CG))+insert(gas(G)).
		forall bel(percept(supply(S,TS)), supply(CS,CTS), (S\=CS;TS\=CTS)) do delete(supply(CS,CTS))+insert(supply(S,TS)).
	}
	actionspec {	
		upgrade(Type) {
			pre {canAfford(Type)}
			post {true}
		}
	}	
}