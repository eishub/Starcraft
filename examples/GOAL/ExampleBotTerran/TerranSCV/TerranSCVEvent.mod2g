use TerranSCV as knowledge.
use "../GenericMods/GenericPercepts.mod2g" as module.


module TerranSCVEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
		
	% The generic percepts most units use
	if true then GenericPercepts.	
	
	% The handling of condition gathering
	if percept(condition(NewList)), bel(member(gathering, NewList), condition(OldList), not(member(gathering, OldList))) then insert(gathering).
	if bel(gathering), percept(condition(List)), bel(not(member(gathering, List))) then delete(gathering).
	
	% The handling of condition constructing
	if percept(condition(NewList)), bel(member(constructing, NewList), condition(OldList), not(member(constructing, OldList))) then insert(constructing).
	if bel(constructing), percept(condition(List)), bel(not(member(constructing, List))) then delete(constructing).
	
	% The handling of the supply percept
	if percept(resources(_, _, C, T)), bel(supply(OC, OT), (not(OC == C) ; not(OT == T))) then delete(supply(OC, OT)) + insert(supply(C, T)).
	
	% The handling of mineralfields	
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
	forall bel(mineralField(Id,Amount,X,Y)), not(percept(mineralField(Id,Amount,_,X,Y))) do delete(mineralField(Id,Amount,X,Y)).
	
	% The handling of the constructionSites
	forall percept(constructionSite(X,Y)), not(bel(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
	forall bel(constructionSite(X,Y)),not(percept(constructionSite(X,Y))) do delete(constructionSite(X,Y)).
	
	% The handling of the workerActivity
	forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
	forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
	
	% The handling of vespeneGeyser percept
	if percept(vespeneGeyser(_, _, _, X , Y)), bel(not(vespeneGeyser(X ,Y))) then insert(vespeneGeyser(X ,Y)).
	if bel(vespeneGeyser(X ,Y)),not(percept(vespeneGeyser(_, _, _, X , Y))) then delete(vespeneGeyser(X ,Y)).
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	
	% If there are 8 scv units, start building barracks
	if bel(builder ; (backupBuilder, unitAmount("Terran Barracks", 1)), unitAmount("Terran SCV", 8)) then adopt(unitAmount("Terran Barracks", 2)).
	
	% If there are 9 scv units, start adding some supply
	if bel(builder, unitAmount("Terran SCV", 9)) then adopt(unitAmount("Terran Supply Depot", 1)).
	
	% If there are 2 barracks start making an academy
	if bel(backupBuilder, unitAmount("Terran Barracks", 2), not(unitAmount("Terran Academy", 1))) then adopt(unitAmount("Terran Academy", 1)).
	
	% Build Supply Depots for supply
	if not(goal(unitAmount("Terran Supply Depot", _))), bel(builder, unitAmount("Terran Supply Depot", N), M is N +1, unitAmount("Terran Barracks", 2), 
	supply(CS, TS), TS - CS < 8) then adopt(unitAmount("Terran Supply Depot", M)).
	
	% If there is a refinery and not enough scv units are gathering gas, adopt goal to do so
	if bel(friendly("Terran Refinery",_,_,_,_,_), shouldMineVespene) then adopt(shouldMineVespene).
	
	% If there is a vespeneGeyser near base, build a refinery
	if bel(vespeneGeyser(X ,Y), not(builder), not(busy), friendly("Terran Command Center",_ ,_,_,BX,BY) ,distance(BX, BY, X, Y, D), D < 10) 
	then adopt(unitAmount("Terran Refinery", 1)).
	
	% If the worker is not busy yet, start gathering minerals
	if bel(not(busy), self(Id, _)) then adopt(workerActivity(Id, gatheringMinerals)).
	
	
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	% If told to be backupBuilder, insert it to knowledge base
	if (_).sent(backupBuilder) then insert(backupBuilder).
	
	% if told to be builder insert it to knowledge base
	if (_).sent(builder) then insert(builder).
}