use TerranSCV as actionspec.
use TerranSCV as knowledge.

module TerranSCVEvent {
	if percept(supply(C,Max)), bel(supply(OC, OMax)) then delete(supply(OC, OMax)) + insert(supply(C,Max)).
		if percept(minerals(M)), bel(minerals(OM), not(M = OM)) then insert(minerals(M)) + delete(minerals(OM)).
		if percept(gas(M)), bel(gas(OM), not(M = OM)) then insert(gas(M)) + delete(gas(OM)).
		
		forall percept(unit(Unit,Number)), bel(not(unit(Unit,Number))) do insert(unit(Unit,Number)).
		forall percept(not(unit(Unit,Number))), bel(unit(Unit,Number)) do delete(unit(Unit,Number)).
		
		if percept(gathering(X)), bel(not(gathering(X))) then insert(gathering(X)).
		if percept(not(gathering(X))), bel(gathering(X)) then delete(gathering(X)).
				
		forall percept(mineralField(Id,_,_,X,Y)), bel(not(mineralField(Id,X,Y))) do insert(mineralField(Id,X,Y)).
		
		forall percept(id(MyId), friendly(Name,Type,Id,Health,Shields,WX,WY,X,Y)), bel(MyId \= Id, not(friendly(Name,Type,Id,X,Y))) do insert(friendly(Name,Type,Id,X,Y)).
		forall percept(not(friendly(Name,Type,Id,_,_,_,_,X,Y))), bel(friendly(Name,Type,Id,X,Y)) do delete(friendly(Name,Type,Id,X,Y)).
		
		if percept(position(X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then insert(position(X1,Y1)) + delete(position(X2,Y2)).
		
		forall percept(not(constructionSite(X,Y))), bel(constructionSite(X,Y)) do delete(constructionSite(X,Y)).
		forall percept(constructionSite(X,Y)), bel(not(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
		
		if percept(constructing), bel(not(constructing)) then insert(constructing).
		if percept(not(constructing)), bel(constructing) then delete(constructing).
		
		if percept(refinery(Id, Resources, Group)), bel(not(refinery(Id, Resources, Group))) then insert(refinery(Id, Resources, Group)).
		if percept(not(refinery(Id, Resources, Group))), bel(refinery(Id, Resources, Group)) then delete(refinery(Id, Resources, Group)).
		
		forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
		forall percept(not(workerActivity(ID,ACT))), bel(workerActivity(ID,ACT)) do delete(workerActivity(ID,ACT)).
		
		if percept(isStuck), bel(not(isStuck)) then insert(isStuck).
		if percept(not(isStuck)), bel(isStuck) then delete(isStuck).
		
		forall (Sender).sent(builder) do insert(builder).
}