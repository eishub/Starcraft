init module {
	knowledge {
		busy :- constructing ; gathering(_).
		cost("Terran Supply Depot", 100, 0).
		cost("Terran Barracks", 150, 0).
		cost("Terran Refinery", 100, 0).
		cost('Terran Academy',150,0).
		condition("Terran Academy")
			:- friendly(_, "Terran Barracks", _, _, _).
		condition("Terran Supply Depot") 
			:- supply(C, Max), Max - C < 6.
		condition("Terran Barracks") 
			:- supply(C, Max), Max >= 20, Max - C > 6,
				((unit("Terran Barracks",Num), Num < 3) ; not(unit("Terran Barracks",_))).
		condition("Terran Refinery").
		canBuild(Building, X, Y) 
			:- 	condition(Building), 
				cost(Building, M, G), 
				minerals(MQ), M =< MQ, 
				gas(GQ), G =< GQ,
				friendly(_, "Terran Command Center", _, TX, TY),
				buildingLocation(TX, TY, X, Y),
				position(MyX,MyY), distance(MyX,MyY,X,Y,D),
				findall(_, (friendly(_, "Terran SCV", _, OtherX, OtherY),
							distance(OtherX,OtherY,X,Y,OtherD), OtherD < D), []).	
		buildingLocation(X,Y, RX,RY) 
			:-	findall([D,BX,BY], (constructionSite(BX,BY), distance(X,Y,BX,BY,D)), L),
				sort(L, [[_,RX,RY]|_]). 				
		distance(X1,Y1,X2,Y2,D) :- D is sqrt((X2-X1)**2 + (Y2-Y1)**2).
		
	}
	
	program {
		if bel(percept(id(Id))) then insert(id(Id)).
		if bel(percept(supply(C,M))) then insert(supply(C,M)).
		if bel(percept(minerals(M))) then insert(minerals(M)).
		if bel(percept(gas(G))) then insert(gas(G)).
		forall bel(percept(constructionSite(X,Y)), not(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
		if bel(percept(position(X,Y))) then insert(position(X,Y)).
	}	
}
main module{
	program[order = linearall] {
		%if bel(canBuild(Building, X, Y)) then insert(constructing) + build(Building, X, Y).
		
		if bel(supply(C, Max), (Max - C) < 2, not(busy), constructionSite(X,Y)) 
		then insert(constructing) + build("Terran Supply Depot", X, Y) + allother.send(building).
		
		if bel(not(busy), percept(vespeneGeyser(_, _, _, X , Y)), minerals(M), M > 100) 
		then insert(constructing) + build("Terran Refinery", X, Y).
		
		if bel(unit("Terran Barracks", _), not(unit("Terran Academy", _)), constructionSite(X,Y), not(busy), minerals(M), M > 150) 
		then insert(constructing) + build("Terran Academy", X, Y).
		
		if bel(((unit("Terran Barracks",Num), Num < 3) ; not(unit("Terran Barracks",_))), constructionSite(X,Y), not(busy), minerals(M), M > 100) 
		then insert(constructing) + build("Terran Barracks", X, Y).
		
		% not working
		if bel(not(busy), refinery(Id, _, _)) then gather(Id).
		
		if bel(not(busy), mineralField(Id), constructionSite(X,Y)) then {
			if bel(not(building)) then insert(constructing) + build("Terran Supply Depot", X, Y) + allother.send(building).
			if bel(building ; supply(C, M), M - C > 1) then gather(Id).
		}
	}	
	actionspec {
		gather(Id) {
			pre { not(gathering(X)) }
			post { true }
		}
		build(Building, X, Y) {
			pre { cost(Building, M, G), minerals(MQ), M =< MQ, gas(GQ), G =< GQ }
			post { not(constructing) }	
		}
	}
}
event module {
	program {
		if bel(percept(supply(C,Max)), supply(OC, OMax)) then delete(supply(OC, OMax)) + insert(supply(C,Max)).
		if bel(percept(minerals(M)), minerals(OM), not(M = OM)) then insert(minerals(M)) + delete(minerals(OM)).
		if bel(percept(gas(M)), gas(OM), not(M = OM)) then insert(gas(M)) + delete(gas(OM)).
		
		forall bel(percept(unit(Unit,Number)), not(unit(Unit,Number))) do insert(unit(Unit,Number)).
		forall bel(unit(Unit,Number), not(percept(unit(Unit,Number)))) do delete(unit(Unit,Number)).
		
		if bel(percept(gathering(X)), not(gathering(X))) then insert(gathering(X)).
		if bel(gathering(X), not(percept(gathering(X)))) then delete(gathering(X)).
				
		forall bel(percept(mineralField(Id,_,_,_,_)), not(mineralField(Id))) do insert(mineralField(Id)).
		
		forall bel(percept(id(MyId)), percept(friendly(Name,Type,Id,Health,Shields,X,Y,BX,BY)), MyId \= Id, not(friendly(Name,Type,Id,X,Y))) do insert(friendly(Name,Type,Id,X,Y)).
		
		if bel(percept(position(X1,Y1)), position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then insert(position(X1,Y1)) + delete(position(X2,Y2)).
		
		forall bel(constructionSite(X,Y), not(percept(constructionSite(X,Y)))) do delete(constructionSite(X,Y)).
		forall bel(percept(constructionSite(X,Y)), not(constructionSite(X,Y))) do insert(constructionSite(X,Y)).
		
		if bel(percept(constructing), not(constructing)) then insert(constructing).
		if bel(not(percept(constructing)), constructing) then delete(constructing).
		
		if bel(percept(refinery(Id, Resources, Group)), not(refinery(Id, Resources, Group))) then insert(refinery(Id, Resources, Group)).
		if bel(not(percept(refinery(Id, Resources, Group))), refinery(Id, Resources, Group)) then delete(refinery(Id, Resources, Group)).
		
		if bel(received(Sender, building)) then insert(building).
		if bel(supply(C, M), M -C > 1) then delete(building).
	}	
}