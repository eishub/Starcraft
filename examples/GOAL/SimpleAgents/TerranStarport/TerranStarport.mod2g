init module{
	knowledge{
		rallyLocation(X,Y, RX,RY) 
			:-	findall([D,BX,BY], (chokepoint(BX,BY), distance(X,Y,BX,BY,D)), L),
				sort(L, [[_,RX,RY]|_]). 				
		distance(X1,Y1,X2,Y2,D) :- D is sqrt((X2-X1)**2 + (Y2-Y1)**2).	
		
		buildLocation(X, Y) :- 
				percept(friendly(_, "Terran Command Center", _,_ ,_ , _, _ , TX, TY)),
				buildingLocation(TX, TY, X, Y).
				
		buildingLocation(X,Y, RX,RY) 
			:-	findall([D,BX,BY], (percept(constructionSite(BX,BY)), distance(X,Y,BX,BY,D)), L),
				sort(L, [[_,RX,RY]|_]). 		
	}
	
	program{
		if bel(percept(friendly(_,"Terran Command Center",_,_,_,_,_,X,Y))) then insert(commandCenter(X,Y)).
		forall bel(percept(chokepoint(X,Y))) do insert(chokepoint(X,Y)).
	}	
}

module main{
		if bel(percept(isBeingConstructed)) then skip.
		if bel(percept(rallyPoint(RX,RY)), RX = 0, RY = 0, commandCenter(X,Y), rallyLocation(X,Y,NX,NY)) then setRallyPoint(NX,NY).	
		
		if bel(not(percept(addon("Terran Control Tower"))),percept(queueSize(N)), N = 0, 
		percept(minerals(X)), X>=50, percept(gas(Y)), Y>=50) then buildAddon("Terran Control Tower").
			
		%if bel(not(percept(addon("Terran Control Tower")))) then lift.
		
		%if bel(percept(lifted), buildLocation(X, Y)) then land(X, Y).
		
		if bel(trainVessel) then train("Terran Science Vessel") + delete(trainVessel). 
}

event module {
	program {
		if bel(percept(queueSize(N)), N < 1, percept(supply(Y,Z)), percept(minerals(X)), X>=100, percept(gas(G)), G>= 225 , (Z - Y) >= 4 ) then{
			 if bel(percept(addon("Terran Control Tower")), percept(friendly(_, "Terran Science Facility", _, _, _, _, _, _, _)), 
			 (percept(unit("Terran Science Vessel", Amount)), Amount < 3 ; not(percept(unit("Terran Science Vessel", _))))) then insert(trainVessel).
		}
	}	
}
