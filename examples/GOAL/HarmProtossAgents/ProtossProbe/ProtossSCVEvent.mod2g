use ProtossSCV as actionspec.
use ProtossSCV as knowledge.

module ProtossSCVEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	if percept(resources(Min,Gas,C,Max)), bel(supply(OC, OMax),minerals(OM), gas(Go))
		then delete(supply(OC, OMax)) + insert(supply(C,Max)) + insert(minerals(Min)) + delete(minerals(OM))+
		insert(gas(Gas)) + delete(gas(Go)).
				
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
	forall percept(mineralField(Id,Amount1,_,X,Y)), bel(mineralField(Id,Amount2,X,Y), (Amount1 \= Amount2)) do delete(mineralField(Id,Amount2,X,Y)).

	forall percept(constructionSite(X,Y,Z)), not(bel(constructionSite(X,Y,Z))) do insert(constructionSite(X,Y,Z)).
	forall bel(constructionSite(X,Y,Z)), not(percept(constructionSite(X,Y,Z))) do delete(constructionSite(X,Y,Z)).
	
	if percept(constructing), not(bel(constructing)) then insert(constructing).
	if bel(constructing), not(percept(constructing)) then delete(constructing).
		
	if percept(refinery(Id, Resources, Group)), bel(not(refinery(Id, Resources, Group))) then insert(refinery(Id, Resources, Group)).
	if bel(refinery(Id, Resources, Group)), not(percept(refinery(Id, Resources, Group))) then delete(refinery(Id, Resources, Group)).
	
	if percept(condition(X)), bel(not(condition(X))) then insert(condition(X)).
	if bel(condition(X)), not(percept(condition(X))) then delete(condition(X)).
		
		
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
		
	if bel(not(busy),mineralField(Id,Amount,X,Y), ownbase(CX,CY), distance(X,Y,CX,CY,L), L<10) then gather(Id).
}