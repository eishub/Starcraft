use ProtossNexus as knowledge.

module ProtossNexusEvent {	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	if percept(queueSize(N)), bel(queueSize(No), No \= N) then delete(queueSize(No)) + insert(queueSize(N)).
	
	if percept(resources(Min,Gas,C,Max)), bel(supply(OC, OMax),minerals(OM), gas(Go))
		then delete(supply(OC, OMax)) + insert(supply(C,Max)) + delete(minerals(OM))+ insert(minerals(Min))+
		delete(gas(Go))+ insert(gas(Gas)).
	
	forall percept(unitAmount(Type,Count)), not(bel(unitAmount(Type,Count))) do insert(unitAmount(Type,Count)).
	forall bel(unitAmount(Type,Count)),not(percept(unitAmount(Type,Count))) do delete(unitAmount(Type,Count)).
	
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	
	if bel(queueSize(N), N < 2, minerals(X), X>=50, supply(Y,Z), Y<Z, unitAmount('Protoss Probe',M) ,M<6) then adopt(train("Protoss Probe")).
	if bel(queueSize(N), N < 2, minerals(X), X>=50, supply(Y,Z), Y<Z, unitAmount('Protoss Pylon',G), G>0, unitAmount('Protoss Probe',M) ,M<10) then adopt(train("Protoss Probe")).
	if bel(queueSize(N), N < 2, minerals(X), X>=50, supply(Y,Z), Y<Z, unitAmount('Protoss Gateway',G), G>0, unitAmount('Protoss Probe',M) ,M<8) then adopt(train("Protoss Probe")).
		
}