package eisbw;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

/**
 * @author Danny & Harm - The windowstool for starting the chaoslauncher and
 *         writing the menu script.
 */
public class WindowsTools {
	private WindowsTools() {
		// Private constructor to hide the public one.
	}

	public static void loadRequirements(final String scDir) {
		if (System.getProperty("os.arch").contains("64")) {
			UnZip("x64.zip", scDir);
		} else {
			UnZip("x86.zip", scDir);
		}
		final File bwapiData = new File(scDir, "bwapi-data");
		bwapiData.mkdirs();
		UnZip("bwapi-data.zip", bwapiData.getPath());
	}

	/**
	 * Starts the Chaoslauncher with launch rules.
	 *
	 * @param race      the race specified in the mas2g
	 * @param map       the map specified in the mas2g
	 * @param scDir     the starcraft installation directory in the mas2g.
	 * @param autoMenu  the automenu (single- or multi-player) specified in the
	 *                  mas2g
	 * @param enemyRace the enemy race
	 * @param seed      the seed (overrides the game seed if > 0)
	 * @throws IOException throws exception when BWAPI.ini cannot be written.
	 */
	public static void startChaoslauncher(final String race, final String map, final String scDir,
			final String autoMenu, final String gameType, final String enemyRace, final int seed) throws IOException {
		populateInitFile(race, map, scDir, autoMenu, gameType, enemyRace, seed);
		Client_InitialSetup(scDir);
		if (autoMenu.toLowerCase().equals("lan")) {
			Runtime.getRuntime().exec(new String[] { scDir + "\\Chaoslauncher\\Chaoslauncher - MultiInstance.exe" },
					null, new File(scDir, "Chaoslauncher"));
		} else {
			Runtime.getRuntime().exec(scDir + "\\Chaoslauncher\\Chaoslauncher.exe", null,
					new File(scDir, "Chaoslauncher"));
		}
	}

	private static void populateInitFile(final String race, final String map, final String scDir, final String autoMenu,
			final String gameType, final String enemyRace, final int seed) {
		final String iniFile = getIniFile(race, map, autoMenu, gameType, enemyRace, seed);
		try {
			Files.write(Paths.get(scDir, "bwapi-data", "bwapi.ini"), iniFile.getBytes(), StandardOpenOption.CREATE,
					StandardOpenOption.TRUNCATE_EXISTING);
		} catch (final Exception exception) {
			Logger.getLogger("StarCraft Logger").log(Level.SEVERE, "Could not write config file.", exception);
		}
	}

	protected static String getIniFile(final String race, final String map, final String autoMenu,
			final String gameType, final String enemyRace, final int seed) {
		final String newLine = System.getProperty("line.separator");
		String iniFile = "";
		iniFile += ";Generated by the GOAL-StarCraft connector" + newLine;

		iniFile += "[ai]" + newLine;
		iniFile += "ai     = NULL" + newLine + newLine;

		iniFile += "[auto_menu]" + newLine;
		iniFile += "auto_menu = " + autoMenu + newLine;
		iniFile += "game_type = " + gameType + newLine;
		if (autoMenu.toLowerCase().equals("lan")) {
			iniFile += "lan_mode = local pc" + newLine;
		}
		iniFile += "pause_dbg = OFF" + newLine;
		iniFile += "auto_restart = OFF" + newLine;
		iniFile += "map = maps\\" + map + newLine;
		iniFile += "race = " + race + newLine;
		iniFile += "enemy_count = 1" + newLine;
		iniFile += "enemy_race = " + enemyRace + newLine + newLine;

		iniFile += "[config]" + newLine;
		iniFile += "holiday = OFF" + newLine;
		iniFile += "shared_memory = ON" + newLine + newLine;

		iniFile += "[window]" + newLine;
		iniFile += "windowed = ON" + newLine;
		iniFile += "width  = 1024" + newLine;
		iniFile += "height = 768" + newLine + newLine;

		iniFile += "[starcraft]" + newLine;
		iniFile += "sound = ON" + newLine;
		if (seed > 0) {
			iniFile += "seed_override = " + Integer.toString(seed) + newLine;
		}
		return iniFile;
	}

	protected static String getRace(final String race, final int seed) {
		if (race.equals("randomtp")) {
			final Random random = (seed > 0) ? new Random(seed) : new Random();
			return (random.nextInt(2) == 0) ? "terran" : "protoss";
		} else if (race.equals("randomtz")) {
			final Random random = (seed > 0) ? new Random(seed) : new Random();
			return (random.nextInt(2) == 0) ? "terran" : "zerg";
		} else if (race.equals("randompz")) {
			final Random random = (seed > 0) ? new Random(seed) : new Random();
			return (random.nextInt(2) == 0) ? "protoss" : "zerg";
		} else {
			return race;
		}
	}

	private static void Client_InitialSetup(final String scPath) {
		// Make sure Starcraft isn't running
		Client_KillStarcraft();
		// Set up local firewall access
		RunWindowsCommand("netsh firewall add allowedprogram program = " + scPath
				+ "\\starcraft.exe name = Starcraft mode = ENABLE scope = AL");
		// Make sure all Starcraft and Chaoslauncher settings are correct
		Client_RegisterStarCraft(scPath);
	}

	private static void Client_RegisterStarCraft(final String scPath) {
		// 32-bit machine StarCraft settings
		final String sc32KeyName = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Blizzard Entertainment\\Starcraft";
		final String sc32UserKeyName = "HKEY_CURRENT_USER\\SOFTWARE\\Blizzard Entertainment\\Starcraft";
		RegEdit(sc32KeyName, "InstallPath", "REG_SZ", scPath);
		RegEdit(sc32KeyName, "Program", "REG_SZ", scPath + "\\StarCraft.exe");
		RegEdit(sc32KeyName, "GamePath", "REG_SZ", scPath + "\\StarCraft.exe");
		RegEdit(sc32UserKeyName, "introX", "REG_DWORD", "00000000");
		// 64-bit machine StarCraft settings
		final String sc64KeyName = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Blizzard Entertainment\\Starcraft";
		final String sc64UserKeyName = "HKEY_CURRENT_USER\\SOFTWARE\\Wow6432Node\\Blizzard Entertainment\\Starcraft";
		RegEdit(sc64KeyName, "InstallPath", "REG_SZ", scPath);
		RegEdit(sc64KeyName, "Program", "REG_SZ", scPath + "\\StarCraft.exe");
		RegEdit(sc64KeyName, "GamePath", "REG_SZ", scPath + "\\StarCraft.exe");
		RegEdit(sc64UserKeyName, "introX", "REG_DWORD", "00000000");
		// Chaoslauncher Settings
		final String clKeyName = "HKEY_CURRENT_USER\\Software\\Chaoslauncher\\Launcher";
		RegEdit(clKeyName, "GameVersion", "REG_SZ", "Starcraft 1.16.1");
		RegEdit(clKeyName, "Width", "REG_DWORD", "00000640");
		RegEdit(clKeyName, "Height", "REG_DWORD", "00000480");
		RegEdit(clKeyName, "StartMinimized", "REG_SZ", "0");
		RegEdit(clKeyName, "MinimizeOnRun", "REG_SZ", "1");
		RegEdit(clKeyName, "RunScOnStartup", "REG_SZ", "1");
		RegEdit(clKeyName, "AutoUpdate", "REG_SZ", "0");
		RegEdit(clKeyName, "WarnNoAdmin", "REG_SZ", "0");
		// Chaoslauncher plugin settings
		final String clpKeyName = "HKEY_CURRENT_USER\\Software\\Chaoslauncher\\PluginsEnabled";
		RegEdit(clpKeyName, "BWAPI Injector (1.16.1) RELEASE", "REG_SZ", "1");
		RegEdit(clpKeyName, "W-MODE 1.02", "REG_SZ", "1");
	}

	public static void Client_KillStarcraft() {
		while (IsWindowsProcessRunning("StarCraft.exe")) {
			RunWindowsCommand("taskkill /T /F /IM StarCraft.exe");
			try {
				Thread.sleep(100);
			} catch (final InterruptedException ignore) {
			}
		}
		while (IsWindowsProcessRunning("Chaoslauncher.exe")) {
			RunWindowsCommand("taskkill /T /F /IM Chaoslauncher.exe");
			try {
				Thread.sleep(100);
			} catch (final InterruptedException ignore) {
			}
		}
		while (IsWindowsProcessRunning("\"Chaoslauncher - MultiInstance.exe\"")) {
			RunWindowsCommand("taskkill /T /F /IM \"Chaoslauncher - MultiInstance.exe\"");
			try {
				Thread.sleep(100);
			} catch (final InterruptedException ignore) {
			}
		}
	}

	private static boolean IsWindowsProcessRunning(final String process) {
		try {
			final Process p = Runtime.getRuntime().exec("tasklist.exe");
			try (BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
				String line;
				while ((line = stdInput.readLine()) != null) {
					if (line.contains(process)) {
						return true;
					}
				}
			}
		} catch (final Exception e) {
			Logger.getLogger("StarCraft Logger").log(Level.SEVERE, "IsWindowsProcessRunning " + process, e);
		}

		return false;
	}

	private static void RunWindowsCommand(final String command) {
		try {
			final String windowsCommandPrefix = "CMD /C ";
			final Process proc = Runtime.getRuntime().exec(windowsCommandPrefix + command);
			proc.waitFor();
		} catch (final Exception e) {
			Logger.getLogger("StarCraft Logger").log(Level.SEVERE, "RunWindowsCommand " + command, e);
		}
	}

	private static void RegEdit(final String keyName, final String valueName, final String type, final String data) {
		final String regadd = "\"" + keyName + "\" /f /v \"" + valueName + "\" /t " + type + " /d \"" + data + "\"";
		RunWindowsCommand("reg add " + regadd);
	}

	private static void UnZip(final String zipfilename, final String path) {
		try {
			final InputStream fis = Thread.currentThread().getContextClassLoader().getResourceAsStream(zipfilename);
			final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
			ZipEntry entry = null;
			while ((entry = zis.getNextEntry()) != null) {
				final File fileInDir = new File(path, entry.getName());
				if (entry.isDirectory()) {
					fileInDir.mkdirs();
				} else {
					Files.write(fileInDir.toPath(), zis.readAllBytes(), StandardOpenOption.CREATE,
							StandardOpenOption.TRUNCATE_EXISTING);
				}
				zis.closeEntry();
			}
			zis.close();
			fis.close();
		} catch (final Exception exception) {
			Logger.getLogger("StarCraft Logger").log(Level.SEVERE, "Could not extract required files.", exception);
		}
	}
}
